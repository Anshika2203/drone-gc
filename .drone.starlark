# this starlark script should be used to generate the .drone.yml
# configuration file.

def main(ctx):
  # execute the linux build and tests before we execute
  # the windows build. This ensures no images are created
  # unless unit tests are passing.
  before = build_linux()

  stages = [
    build_windows('1809'),
    build_windows('1903'),
  ]

  after = upload_manifest()

  # the after stage should only execute after all previous
  # stages complete. this builds the dependency graph.
  for stage in stages:
    stage['depends_on'] = [before['name']]
    after['depends_on'].append(stage['name'])

  return [before] + stages + [ after ]

# create a pipeline stage responsible for building and
# publishing the Docker image on linux.
def build_linux():
    return {
        'kind': 'pipeline',
        'type': 'docker',
        'name': 'build-linux',
        'steps': [
            {
                'name': 'build',
                'image': 'golang:1.12',
                'commands': [
                    'go test ./...',
                    'sh scripts/build.sh',
                ],
            },
            docker_plugin('amd64'),
            docker_plugin('arm64'),
            docker_plugin('arm'),
        ]
    }

# create a pipeline step responsible for building and publishing
# the docker image to dockerhub.
def docker_plugin(arch):
    return {
        'name': 'publish_%s' % arch,
        'image': 'plugins/docker:18',
        'settings': {
            'auto_tag': 'true',
            'auto_tag_suffix': 'linux-%s' % arch,
            'dockerfile': 'docker/Dockerfile.linux.%s' % arch,
            'username': { 'from_secret': 'docker_username' },
            'password': { 'from_secret': 'docker_password' },
            'repo': 'drone/gc',
        },
        'when': {
            'event': ['push', 'tag']
        }
    }

# create a pipeline stage responsible for building and
# publishing the Docker image on windows. The windows stage
# uses an ssh runner, as opposed to a docker runner.
def build_windows(version):
  return {
    'kind': 'pipeline',
    'type': 'ssh',
    'name': 'windows-%s-amd64' % version,
    'platform': { 'os': 'windows' },
    'server': {
      'host':     { 'from_secret': 'windows_server_%s' % version },
      'user':     { 'from_secret': 'windows_username' },
      'password': { 'from_secret': 'windows_password' },
    },
    'steps': [
      {
        'name': 'build',
        'environment': {
          'USERNAME': { 'from_secret': 'docker_username' },
          'PASSWORD': { 'from_secret': 'docker_password' },
        },
        # TODO these commands build and publish the latest
        # docker tag regardless of git tag.
        'commands': [
          'powershell.exe scripts/build.ps1',
          'docker login -u $env:USERNAME -p $env:PASSWORD',
          'docker build -f docker/Dockerfile.windows.%s.amd64 -t drone/gc:windows-%s-amd64 .' % (version, version),
          'docker push drone/gc:windows-%s-amd64' % version,
        ],
      },
    ],
    'trigger': {
      'event': ['push']
    }
  }

# create a pipeline stage responsible for creating and
# publishing a docker manifest to the registry.
def upload_manifest():
  return {
    'kind': 'pipeline',
    'type': 'docker',
    'name': 'manifest',
    'steps': [
      {
        'name': 'manifest',
        'image': 'plugins/manifest',
        'settings': {
          'auto_tag': 'true',
          'username': { 'from_secret': 'docker_username' },
          'password': { 'from_secret': 'docker_password' },
          'spec': 'docker/manifest.tmpl',
          'ignore_missing': 'true',
        },
      },
    ],
    'depends_on': [],
    'trigger': {
      'event': ['push', 'tag']
    }
  }